#                    round(optmFit.return,2)
#                } else {
#                    rep(NA, length(c(startCoef, adstocks.min))+2)
#                }
})
MMR.Optm.InTrain <- function(dataset, fixed.vars, random.vars, inTrain) {
# Determine what variables are present
inTrainSum <- t(rowsum(ad.data[, random.vars], inTrain))[,2]
present.vars <- names(inTrainSum)[inTrainSum > 0]
# Get parameters starting, min & max values
formula0 <- paste0("sales ~ ", paste(paste(fixed.vars, collapse = " + "),
paste(present.vars, collapse = " + "),
sep = " + "))
#print(paste("Formula0:", formula0))
modFit0 <- lm(formula0, data=ad.data[inTrain,])
coef.start <- coef(modFit0)
coef.min   <- rep(-Inf, length(coef.start))
coef.max   <- rep( Inf, length(coef.start))
names(coef.start) <- c("Intercept", paste0(names(coef.start)[2:(length(coef.start))], ".coef"))
names(coef.min  ) <- names(coef.start)
names(coef.max  ) <- names(coef.start)
adstocks.start <- rep(0   , length(present.vars))
adstocks.min   <- rep(0   , length(present.vars))
adstocks.max   <- rep(0.99, length(present.vars))
names(adstocks.start) <- paste0(present.vars, ".adstock")
names(adstocks.min  ) <- names(adstocks.start)
names(adstocks.max  ) <- names(adstocks.start)
# Build formula
formula2 <- optm.formula("sales", fixed.vars, present.vars)
#ad.data$inTrain <- inTrain
# Run optimization
try(nlsLM(formula2,
data      = ad.data,
algorithm = "LM",
#              start     = c(coef.start, adstocks.start),
lower     = c(coef.min  , adstocks.min  ),
upper     = c(coef.max  , adstocks.max  )))
}
optm.LM <-
sapply(trials, simplify = T,
FUN= function(inTrain) {
ad.data$inTrain <- inTrain
optmFit <- MMR.Optm.InTrain(ad.data, c("Trend", "Season"), c("ad1", "ad2", "ad3"), inTrain)
if(class(optmFit) != "try-error") {
print(round(coef(optmFit), 2))
round(coef(optmFit), 2)
} else {
rep(NA, 7)
}
#                if(class(optmFit) != "try-error") {
#                    rss.train <- sum((residuals(optmFit)*!!inTrain)^2)
#                    ad.data$inTrain <- !inTrain
#                    rss.test  <- sum(((ad.data$sales - predict(optmFit, newdata = ad.data))*!inTrain)^2)
#                    optmFit.return <- c(coef(optmFit), rss.train, rss.test)
#                    names(optmFit.return) <- c(names(c(startCoef, adstocks.min)), "RSS.Train", "RSS.Test")
#                    round(optmFit.return,2)
#                } else {
#                    rep(NA, length(c(startCoef, adstocks.min))+2)
#                }
})
MMR.Optm.InTrain <- function(dataset, fixed.vars, random.vars, inTrain) {
# Determine what variables are present
inTrainSum <- t(rowsum(ad.data[, random.vars], inTrain))[,2]
present.vars <- names(inTrainSum)[inTrainSum > 0]
# Get parameters starting, min & max values
formula0 <- paste0("sales ~ ", paste(paste(fixed.vars, collapse = " + "),
paste(present.vars, collapse = " + "),
sep = " + "))
print(paste("Formula0:", formula0))
modFit0 <- lm(formula0, data=ad.data[inTrain,])
coef.start <- coef(modFit0)
coef.min   <- rep(-Inf, length(coef.start))
coef.max   <- rep( Inf, length(coef.start))
names(coef.start) <- c("Intercept", paste0(names(coef.start)[2:(length(coef.start))], ".coef"))
names(coef.min  ) <- names(coef.start)
names(coef.max  ) <- names(coef.start)
adstocks.start <- rep(0   , length(present.vars))
adstocks.min   <- rep(0   , length(present.vars))
adstocks.max   <- rep(0.99, length(present.vars))
names(adstocks.start) <- paste0(present.vars, ".adstock")
names(adstocks.min  ) <- names(adstocks.start)
names(adstocks.max  ) <- names(adstocks.start)
# Build formula
formula2 <- optm.formula("sales", fixed.vars, present.vars)
#ad.data$inTrain <- inTrain
# Run optimization
try(nlsLM(formula2,
data      = ad.data,
algorithm = "LM",
#              start     = c(coef.start, adstocks.start),
lower     = c(coef.min  , adstocks.min  ),
upper     = c(coef.max  , adstocks.max  )))
}
trials <- createInTrainFolds(ad.data, 4)
optm.LM <-
sapply(trials, simplify = T,
FUN= function(inTrain) {
ad.data$inTrain <- inTrain
optmFit <- MMR.Optm.InTrain(ad.data, c("Trend", "Season"), c("ad1", "ad2", "ad3"), inTrain)
if(class(optmFit) != "try-error") {
print(round(coef(optmFit), 2))
round(coef(optmFit), 2)
} else {
rep(NA, 7)
}
#                if(class(optmFit) != "try-error") {
#                    rss.train <- sum((residuals(optmFit)*!!inTrain)^2)
#                    ad.data$inTrain <- !inTrain
#                    rss.test  <- sum(((ad.data$sales - predict(optmFit, newdata = ad.data))*!inTrain)^2)
#                    optmFit.return <- c(coef(optmFit), rss.train, rss.test)
#                    names(optmFit.return) <- c(names(c(startCoef, adstocks.min)), "RSS.Train", "RSS.Test")
#                    round(optmFit.return,2)
#                } else {
#                    rep(NA, length(c(startCoef, adstocks.min))+2)
#                }
})
years       <- 2
weeks       <- 52*years
ad.weeks    <- 52*years
ads.count   <- 3
ads.model   <- 3
ads.cor     <- 0
noise.count <- 0
ad.data <- sim.ads(52, T, T, ads.count)
years       <- 2
weeks       <- 52*years
ad.weeks    <- 52*years
ads.count   <- 3
ads.model   <- 3
ads.cor     <- 0
noise.count <- 0
ad.data <- sim.ads(52, T, T, ads.count)
ad.data <- sim.ads(52, T, T, ads.count, adstock.max = 0.8)
ad.data <- sim.ads(52, T, T, ads.count, adstock.max = 0.8)
ad.data <- sim.ads(52, T, T, ads.count, adstock.max = 0.8)
ad.data <- sim.ads(52, T, T, ads.count, adstock.max = 0.8)
ad.data <- sim.ads(52, T, T, ads.count, adstock.max = 0.8)
ad.data <- sim.ads(52, T, T, ads.count, adstock.max = 0.8)
trials <- createInTrainFolds(ad.data, 3)
options(scipen=999)
optm.LM <-
sapply(trials, simplify = T,
FUN= function(inTrain) {
ad.data$inTrain <- inTrain
optmFit <- MMR.Optm.InTrain(ad.data, c("Trend", "Season"), c("ad1", "ad2", "ad3"), inTrain)
if(class(optmFit) != "try-error") {
print(round(coef(optmFit), 2))
round(coef(optmFit), 2)
} else {
rep(NA, 7)
}
#                if(class(optmFit) != "try-error") {
#                    rss.train <- sum((residuals(optmFit)*!!inTrain)^2)
#                    ad.data$inTrain <- !inTrain
#                    rss.test  <- sum(((ad.data$sales - predict(optmFit, newdata = ad.data))*!inTrain)^2)
#                    optmFit.return <- c(coef(optmFit), rss.train, rss.test)
#                    names(optmFit.return) <- c(names(c(startCoef, adstocks.min)), "RSS.Train", "RSS.Test")
#                    round(optmFit.return,2)
#                } else {
#                    rep(NA, length(c(startCoef, adstocks.min))+2)
#                }
})
MMR.Optm.InTrain <- function(dataset, fixed.vars, random.vars, inTrain) {
# Determine what variables are present
inTrainSum <- t(rowsum(ad.data[, random.vars], inTrain))[,2]
present.vars <- names(inTrainSum)[inTrainSum > 0]
# Get parameters starting, min & max values
formula0 <- paste0("sales ~ ", paste(paste(fixed.vars, collapse = " + "),
paste(present.vars, collapse = " + "),
sep = " + "))
print(paste("Formula0:", formula0))
modFit0 <- lm(formula0, data=ad.data[inTrain,])
coef.start <- coef(modFit0)
coef.min   <- rep(-Inf, length(coef.start))
coef.max   <- rep( Inf, length(coef.start))
names(coef.start) <- c("Intercept", paste0(names(coef.start)[2:(length(coef.start))], ".coef"))
names(coef.min  ) <- names(coef.start)
names(coef.max  ) <- names(coef.start)
adstocks.start <- rep(0   , length(present.vars))
adstocks.min   <- rep(0   , length(present.vars))
adstocks.max   <- rep(0.99, length(present.vars))
names(adstocks.start) <- paste0(present.vars, ".adstock")
names(adstocks.min  ) <- names(adstocks.start)
names(adstocks.max  ) <- names(adstocks.start)
# Build formula
formula2 <- optm.formula("sales", fixed.vars, present.vars)
#ad.data$inTrain <- inTrain
print(c(coef.start, adstocks.start))
print(c(coef.min  , adstocks.min  ))
print(c(coef.max  , adstocks.max))
# Run optimization
try(nlsLM(formula2,
data      = ad.data,
algorithm = "LM",
start     = c(coef.start, adstocks.start),
lower     = c(coef.min  , adstocks.min  ),
upper     = c(coef.max  , adstocks.max  )))
}
trials <- createInTrainFolds(ad.data, 3)
options(scipen=999)
optm.LM <-
sapply(trials, simplify = T,
FUN= function(inTrain) {
ad.data$inTrain <- inTrain
optmFit <- MMR.Optm.InTrain(ad.data, c("Trend", "Season"), c("ad1", "ad2", "ad3"), inTrain)
if(class(optmFit) != "try-error") {
print(round(coef(optmFit), 2))
round(coef(optmFit), 2)
} else {
rep(NA, 7)
}
#                if(class(optmFit) != "try-error") {
#                    rss.train <- sum((residuals(optmFit)*!!inTrain)^2)
#                    ad.data$inTrain <- !inTrain
#                    rss.test  <- sum(((ad.data$sales - predict(optmFit, newdata = ad.data))*!inTrain)^2)
#                    optmFit.return <- c(coef(optmFit), rss.train, rss.test)
#                    names(optmFit.return) <- c(names(c(startCoef, adstocks.min)), "RSS.Train", "RSS.Test")
#                    round(optmFit.return,2)
#                } else {
#                    rep(NA, length(c(startCoef, adstocks.min))+2)
#                }
})
## **********************************************************************************************************************
## Run optimization
## **********************************************************************************************************************
modeled.vars <- c("Trend", "Season", "ad1", "ad2", "ad3")
fixed.vars <- c("Trend", "Season")
random.vars <- c("ad1", "ad2", "ad3")
optm.formula <- function(dep.var, fixed.vars, present.vars) {
fixed.vars.coef      <- paste0(fixed.vars, ".coef")
present.vars.coef    <- paste0(present.vars, ".coef")
present.vars.adstock <- paste0(present.vars, ".adstock")
paste0(dep.var, " ~ ",
"inTrain * (Intercept + ",
paste0(fixed.vars.coef, "*", fixed.vars, collapse = " + "), " + ",
paste0(present.vars.coef, "*adstock(", present.vars, ", ", present.vars.adstock, ")",collapse = " + "),
")")
}
MMR.Optm.InTrain <- function(dataset, fixed.vars, random.vars, inTrain) {
# Determine what variables are present
inTrainSum <- t(rowsum(ad.data[, random.vars], inTrain))[,2]
present.vars <- names(inTrainSum)[inTrainSum > 0]
# Get parameters starting, min & max values
formula0 <- paste0("sales ~ ", paste(paste(fixed.vars, collapse = " + "),
paste(present.vars, collapse = " + "),
sep = " + "))
print(paste("Formula0:", formula0))
modFit0 <- lm(formula0, data=ad.data[inTrain,])
coef.start <- coef(modFit0)
coef.min   <- rep(-Inf, length(coef.start))
coef.max   <- rep( Inf, length(coef.start))
names(coef.start) <- c("Intercept", paste0(names(coef.start)[2:(length(coef.start))], ".coef"))
names(coef.min  ) <- names(coef.start)
names(coef.max  ) <- names(coef.start)
adstocks.start <- rep(0   , length(present.vars))
adstocks.min   <- rep(0   , length(present.vars))
adstocks.max   <- rep(0.99, length(present.vars))
names(adstocks.start) <- paste0(present.vars, ".adstock")
names(adstocks.min  ) <- names(adstocks.start)
names(adstocks.max  ) <- names(adstocks.start)
# Build formula
formula2 <- optm.formula("sales", fixed.vars, present.vars)
#ad.data$inTrain <- inTrain
print(c(coef.start, adstocks.start))
print(c(coef.min  , adstocks.min  ))
print(c(coef.max  , adstocks.max))
print(names(ad.data))
print("")
# Run optimization
try(nlsLM(formula2,
data      = ad.data,
algorithm = "LM",
start     = c(coef.start, adstocks.start),
lower     = c(coef.min  , adstocks.min  ),
upper     = c(coef.max  , adstocks.max  )))
}
trials <- createInTrainFolds(ad.data, 3)
options(scipen=999)
optm.LM <-
sapply(trials, simplify = T,
FUN= function(inTrain) {
ad.data$inTrain <- inTrain
optmFit <- MMR.Optm.InTrain(ad.data, c("Trend", "Season"), c("ad1", "ad2", "ad3"), inTrain)
if(class(optmFit) != "try-error") {
print(round(coef(optmFit), 2))
round(coef(optmFit), 2)
} else {
rep(NA, 7)
}
#                if(class(optmFit) != "try-error") {
#                    rss.train <- sum((residuals(optmFit)*!!inTrain)^2)
#                    ad.data$inTrain <- !inTrain
#                    rss.test  <- sum(((ad.data$sales - predict(optmFit, newdata = ad.data))*!inTrain)^2)
#                    optmFit.return <- c(coef(optmFit), rss.train, rss.test)
#                    names(optmFit.return) <- c(names(c(startCoef, adstocks.min)), "RSS.Train", "RSS.Test")
#                    round(optmFit.return,2)
#                } else {
#                    rep(NA, length(c(startCoef, adstocks.min))+2)
#                }
})
MMR.Optm.InTrain <- function(dataset, fixed.vars, random.vars, inTrain) {
# Determine what variables are present
inTrainSum <- t(rowsum(ad.data[, random.vars], inTrain))[,2]
present.vars <- names(inTrainSum)[inTrainSum > 0]
# Get parameters starting, min & max values
formula0 <- paste0("sales ~ ", paste(paste(fixed.vars, collapse = " + "),
paste(present.vars, collapse = " + "),
sep = " + "))
print(paste("Formula0:", formula0))
modFit0 <- lm(formula0, data=ad.data[inTrain,])
coef.start <- coef(modFit0)
coef.min   <- rep(-Inf, length(coef.start))
coef.max   <- rep( Inf, length(coef.start))
names(coef.start) <- c("Intercept", paste0(names(coef.start)[2:(length(coef.start))], ".coef"))
names(coef.min  ) <- names(coef.start)
names(coef.max  ) <- names(coef.start)
adstocks.start <- rep(0   , length(present.vars))
adstocks.min   <- rep(0   , length(present.vars))
adstocks.max   <- rep(0.99, length(present.vars))
names(adstocks.start) <- paste0(present.vars, ".adstock")
names(adstocks.min  ) <- names(adstocks.start)
names(adstocks.max  ) <- names(adstocks.start)
# Build formula
formula2 <- optm.formula("sales", fixed.vars, present.vars)
ad.data$inTrain <- inTrain
print(c(coef.start, adstocks.start))
print(c(coef.min  , adstocks.min  ))
print(c(coef.max  , adstocks.max))
print(names(ad.data))
print("")
# Run optimization
try(nlsLM(formula2,
data      = ad.data,
algorithm = "LM",
start     = c(coef.start, adstocks.start),
lower     = c(coef.min  , adstocks.min  ),
upper     = c(coef.max  , adstocks.max  )))
}
optm.LM <-
sapply(trials, simplify = T,
FUN= function(inTrain) {
ad.data$inTrain <- inTrain
optmFit <- MMR.Optm.InTrain(ad.data, c("Trend", "Season"), c("ad1", "ad2", "ad3"), inTrain)
if(class(optmFit) != "try-error") {
print(round(coef(optmFit), 2))
round(coef(optmFit), 2)
} else {
rep(NA, 7)
}
#                if(class(optmFit) != "try-error") {
#                    rss.train <- sum((residuals(optmFit)*!!inTrain)^2)
#                    ad.data$inTrain <- !inTrain
#                    rss.test  <- sum(((ad.data$sales - predict(optmFit, newdata = ad.data))*!inTrain)^2)
#                    optmFit.return <- c(coef(optmFit), rss.train, rss.test)
#                    names(optmFit.return) <- c(names(c(startCoef, adstocks.min)), "RSS.Train", "RSS.Test")
#                    round(optmFit.return,2)
#                } else {
#                    rep(NA, length(c(startCoef, adstocks.min))+2)
#                }
})
MMR.Optm.InTrain <- function(dataset, fixed.vars, random.vars, inTrain) {
# Determine what variables are present
inTrainSum <- t(rowsum(ad.data[, random.vars], inTrain))[,2]
present.vars <- names(inTrainSum)[inTrainSum > 0]
# Get parameters starting, min & max values
formula0 <- paste0("sales ~ ", paste(paste(fixed.vars, collapse = " + "),
paste(present.vars, collapse = " + "),
sep = " + "))
print(paste("Formula0:", formula0))
modFit0 <- lm(formula0, data=ad.data[inTrain,])
coef.start <- coef(modFit0)
coef.min   <- rep(-Inf, length(coef.start))
coef.max   <- rep( Inf, length(coef.start))
names(coef.start) <- c("Intercept", paste0(names(coef.start)[2:(length(coef.start))], ".coef"))
names(coef.min  ) <- names(coef.start)
names(coef.max  ) <- names(coef.start)
adstocks.start <- rep(0   , length(present.vars))
adstocks.min   <- rep(0   , length(present.vars))
adstocks.max   <- rep(0.99, length(present.vars))
names(adstocks.start) <- paste0(present.vars, ".adstock")
names(adstocks.min  ) <- names(adstocks.start)
names(adstocks.max  ) <- names(adstocks.start)
# Build formula
formula2 <- optm.formula("sales", fixed.vars, present.vars)
ad.data$inTrain <- inTrain
#     print(c(coef.start, adstocks.start))
#     print(c(coef.min  , adstocks.min  ))
#     print(c(coef.max  , adstocks.max))
#
#     print(names(ad.data))
#     print("")
# Run optimization
try(nlsLM(formula2,
data      = ad.data,
algorithm = "LM",
start     = c(coef.start, adstocks.start),
lower     = c(coef.min  , adstocks.min  ),
upper     = c(coef.max  , adstocks.max  )))
}
optm.LM <-
sapply(trials, simplify = T,
FUN= function(inTrain) {
ad.data$inTrain <- inTrain
optmFit <- MMR.Optm.InTrain(ad.data, c("Trend", "Season"), c("ad1", "ad2", "ad3"), inTrain)
if(class(optmFit) != "try-error") {
print(round(coef(optmFit), 2))
round(coef(optmFit), 2)
} else {
rep(NA, 7)
}
#                if(class(optmFit) != "try-error") {
#                    rss.train <- sum((residuals(optmFit)*!!inTrain)^2)
#                    ad.data$inTrain <- !inTrain
#                    rss.test  <- sum(((ad.data$sales - predict(optmFit, newdata = ad.data))*!inTrain)^2)
#                    optmFit.return <- c(coef(optmFit), rss.train, rss.test)
#                    names(optmFit.return) <- c(names(c(startCoef, adstocks.min)), "RSS.Train", "RSS.Test")
#                    round(optmFit.return,2)
#                } else {
#                    rep(NA, length(c(startCoef, adstocks.min))+2)
#                }
})
optm.LM
optm.LM <-
sapply(trials, simplify = F,
FUN= function(inTrain) {
optmFit <- MMR.Optm.InTrain(ad.data, c("Trend", "Season"), c("ad1", "ad2", "ad3"), inTrain)
if(class(optmFit) != "try-error") {
#                    print(round(coef(optmFit), 2))
round(coef(optmFit), 2)
} else {
NA
}
#                if(class(optmFit) != "try-error") {
#                    rss.train <- sum((residuals(optmFit)*!!inTrain)^2)
#                    ad.data$inTrain <- !inTrain
#                    rss.test  <- sum(((ad.data$sales - predict(optmFit, newdata = ad.data))*!inTrain)^2)
#                    optmFit.return <- c(coef(optmFit), rss.train, rss.test)
#                    names(optmFit.return) <- c(names(c(startCoef, adstocks.min)), "RSS.Train", "RSS.Test")
#                    round(optmFit.return,2)
#                } else {
#                    rep(NA, length(c(startCoef, adstocks.min))+2)
#                }
})
optm.LM
trials <- createInTrainFolds(ad.data, 10)
options(scipen=999)
optm.LM <-
sapply(trials, simplify = F,
FUN= function(inTrain) {
optmFit <- MMR.Optm.InTrain(ad.data, c("Trend", "Season"), c("ad1", "ad2", "ad3"), inTrain)
if(class(optmFit) != "try-error") {
#                    print(round(coef(optmFit), 2))
round(coef(optmFit), 2)
} else {
NA
}
#                if(class(optmFit) != "try-error") {
#                    rss.train <- sum((residuals(optmFit)*!!inTrain)^2)
#                    ad.data$inTrain <- !inTrain
#                    rss.test  <- sum(((ad.data$sales - predict(optmFit, newdata = ad.data))*!inTrain)^2)
#                    optmFit.return <- c(coef(optmFit), rss.train, rss.test)
#                    names(optmFit.return) <- c(names(c(startCoef, adstocks.min)), "RSS.Train", "RSS.Test")
#                    round(optmFit.return,2)
#                } else {
#                    rep(NA, length(c(startCoef, adstocks.min))+2)
#                }
})
optm.LM
optm.LM <-
lapply(trials,
FUN= function(inTrain) {
optmFit <- MMR.Optm.InTrain(ad.data, c("Trend", "Season"), c("ad1", "ad2", "ad3"), inTrain)
if(class(optmFit) != "try-error") {
#                    print(round(coef(optmFit), 2))
round(coef(optmFit), 2)
} else {
NA
}
#                if(class(optmFit) != "try-error") {
#                    rss.train <- sum((residuals(optmFit)*!!inTrain)^2)
#                    ad.data$inTrain <- !inTrain
#                    rss.test  <- sum(((ad.data$sales - predict(optmFit, newdata = ad.data))*!inTrain)^2)
#                    optmFit.return <- c(coef(optmFit), rss.train, rss.test)
#                    names(optmFit.return) <- c(names(c(startCoef, adstocks.min)), "RSS.Train", "RSS.Test")
#                    round(optmFit.return,2)
#                } else {
#                    rep(NA, length(c(startCoef, adstocks.min))+2)
#                }
})
optm.LM
optm.LM <-
sapply(trials, simplify = T,
FUN= function(inTrain) {
optmFit <- MMR.Optm.InTrain(ad.data, c("Trend", "Season"), c("ad1", "ad2", "ad3"), inTrain)
if(class(optmFit) != "try-error") {
#                    print(round(coef(optmFit), 2))
round(coef(optmFit), 2)
} else {
NA
}
#                if(class(optmFit) != "try-error") {
#                    rss.train <- sum((residuals(optmFit)*!!inTrain)^2)
#                    ad.data$inTrain <- !inTrain
#                    rss.test  <- sum(((ad.data$sales - predict(optmFit, newdata = ad.data))*!inTrain)^2)
#                    optmFit.return <- c(coef(optmFit), rss.train, rss.test)
#                    names(optmFit.return) <- c(names(c(startCoef, adstocks.min)), "RSS.Train", "RSS.Test")
#                    round(optmFit.return,2)
#                } else {
#                    rep(NA, length(c(startCoef, adstocks.min))+2)
#                }
})
optm.LM
