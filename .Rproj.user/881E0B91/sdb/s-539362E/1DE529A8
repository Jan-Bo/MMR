{
    "contents" : "library(MMR)\n\nrm(list=ls())\n\noptions(scipen=999, digits=2)\n\n## **********************************************************************************************************************\n## Simulate ads & sales\n## **********************************************************************************************************************\nset.seed(8)\nad.data <- sim.ads(weeks       = 3*52,\n                   trend       = T, \n                   season      = T,\n                   ads.count   = 3,\n                   ads.noise   = 6,\n                   adstock.max = 0.8,\n                   sequantial  = F)\n\n## End simulate ads & sales\n\n\n## **********************************************************************************************************************\n## Run optimization\n## **********************************************************************************************************************\n# Split data into training vs. validation\ntraining   <- seq(from = 1, nrow(ad.data))\ndata.train <- ad.data[training, ]\n\n# Generate inTrain trials\ntrials <- createInTrainSamples(data.train, times = 50, p=.7)\n\nindp.vars <- c(\"Trend\", \"Season\", paste0(\"ad\", 1:3), paste0(\"noise\", 1:6))\n\n# Define quick MMR.Optim\nMMR.Optim.Quick <- \n    function(indp.try) {\n        MMR.Optim(dep.var     = \"sales\",\n                  indp.vars   = c(\"Trend\", \"Season\", paste0(\"ad\", 1:3), paste0(\"noise\", 1:6)),\n                  max.adstock = c(Trend=0, Season=0),\n                  data        = data.train,\n                  algorithm   = \"LM\",\n                  cvTrials    = trials,\n                  indp.try    = indp.try)\n    }\n\nmodels <-\n    lapply(1:9,\n           function(indp.try) {\n               MMR.Optim.Quick(indp.try)\n           })\n\nsapply(models,\n       function(optmFit) {\n           optmPred <- MMR.Predict(optmFit, combineMethod = \"MSE\")\n           mean(abs(optmPred[training]/ad.data$sales[training]-1))\n       })\n\nMSE.train <-\n    sapply(models,\n           function(optmFit) {\n               mean(getModelErrors(MMR.object = optmFit, type = \"MSE\", training = T), na.rm = T)\n           })\nMSE.test <- \n    sapply(models,\n           function(optmFit) {\n               mean(getModelErrors(MMR.object = optmFit, type = \"MSE\", training = F), na.rm = T)\n           })\n\nplot(x=1:length(models), y=MSE.train, type=\"l\", col=\"blue\")\nlines(x=1:length(models), y=MSE.test, col=\"red\")\n\nMMR.Contributions(models[[9]])[indp.vars]\n\n\n###################################\nMMR.object <- models[[9]]\nindp.vars <- c(\"Trend\", \"Season\", paste0(\"ad\", 1:3), paste0(\"noise\", 1:6))\nnames(indp.vars) <- indp.vars\n\nMMR.Coef.Plot(MMR.object, c(paste0(\"ad\", 1:3), paste0(\"noise\", 1:6)))\noptmFit.coef <- \n    lapply(indp.vars,\n           function(oneVar) {\n               sapply(MMR.object,\n                      function(nlsObject) {\n                          if(class(nlsObject) != \"nls\") {\n                              NA\n                          } else {\n                              coef(nlsObject)[paste0(oneVar, \".coef\")]\n                          }\n                      })\n           })\n\np.value <- \n    sapply(optmFit.coef, function(oneVar) {\n        t.test(oneVar)$p.value\n    })\nround(p.value, 5)\n\nindp.vars.select <- names(p.value[p.value<0.05])\nindp.vars.select\n\ntrials.new <- createInTrainSamples(data = ad.data, p = 1)\n\nsummary(MMR.Optim(dep.var = \"sales\", indp.vars =  indp.vars.select, max.adstock = c(Trend=0, Season=0), data = ad.data, cvTrials = trials.new)[[1]])\n\nMMR.Contributions()",
    "created" : 1414255587845.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3534217536",
    "id" : "1DE529A8",
    "lastKnownWriteTime" : 1414423140,
    "path" : "~/OneDrive/Work Files/R Libraries/MMR Testing/Random Variable Selection Performance.R",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled2"
    },
    "source_on_save" : false,
    "type" : "r_source"
}