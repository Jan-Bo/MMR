{
    "contents" : "MMR.object <- models[[9]]\nindp.vars <- c(\"Trend\", \"Season\", paste0(\"ad\", 1:3), paste0(\"noise\", 1:6))\nnames(indp.vars) <- indp.vars\n\nMMR.Coef.Plot(MMR.object, c(paste0(\"ad\", 1:3), paste0(\"noise\", 1:6)))\noptmFit.coef <- \n    lapply(indp.vars,\n           function(oneVar) {\n               sapply(MMR.object,\n                      function(nlsObject) {\n                          if(class(nlsObject) != \"nls\") {\n                              NA\n                          } else {\n                              coef(nlsObject)[paste0(oneVar, \".coef\")]\n                          }\n                      })\n           })\n\np.value <- \n    sapply(optmFit.coef, function(oneVar) {\n        t.test(oneVar)$p.value\n    })\nround(p.value, 5)\n\nnames(p.value[p.value<0.000005])\n\n\n\np.valueDF <- data.frame(vars=as.factor(names(p.value)), p.value=as.numeric(p.value))\n\nggplot(p.valueDF, aes(x=vars, y=p.value)) + geom_bar(stat=\"identity\")\n\n\nad1.coef.t.test <- t.test(ad1.coef)\nad1.coef.t.test$p.value\n\n#Extract optimized parameters estimates\noptmFit.DF <- \n    mclapply(object,\n             FUN= function(optmFit) {\n                 # Extract optimizated parameters cofficients\n                 if(class(optmFit) == \"nls\") {\n                     inTrain <- optmFit$model$inTrain\n                     \n                     new.data <- getModeledData(optmFit)\n                     \n                     # optmFit$model[[1]] is the first element in the model data frame and contains the dependant variable\n                     new.data$inTrain <- inTrain\n                     MSE.train  <- NA\n                     MAPE.train <- NA\n                     if(sum(inTrain)){\n                         predicted  <- predict(optmFit, newdata= new.data)\n                         MSE.train  <- sum(((optmFit$model[[1]] - predicted)* inTrain)^2)/sum(inTrain)\n                         MAPE.train <- sum(abs(predicted/optmFit$model[[1]]-1)*inTrain)/sum(inTrain)\n                     }\n                     \n                     new.data$inTrain <- !inTrain\n                     MSE.test  <- NA\n                     MAPE.test <- NA\n                     if(sum(!inTrain)) {\n                         predicted <- predict(optmFit, newdata= new.data)\n                         MSE.test  <- sum(((optmFit$model[[1]] - predicted)*!inTrain)^2)/sum(!inTrain)\n                         MAPE.test <- sum(abs(predicted/optmFit$model[[1]]-1)*!(inTrain))/sum(!inTrain)\n                     }\n                     \n                     optmFit.return <- c(coef(optmFit), MSE.train, MSE.test, MAPE.train, MAPE.test)\n                     optmFit.DF <- data.frame(Param=c(names(coef(optmFit)), \"MSE.train\", \"MSE.test\", \"MAPE.train\", \"MAPE.test\"),\n                                              optmFit=optmFit.return)\n                     names(optmFit.DF)[2] <- paste0(\"optmFit\", sample(1:1000000, 1))\n                 } else {\n                     optmFit.DF <- data.frame(Param=c(\"MSE.train\", \"MSE.test\", \"MAPE.train\", \"MAPE.test\"), optmFit=NA)\n                     names(optmFit.DF)[2] <- paste0(\"optmFit\", sample(1:1000000, 1))\n                 }\n                 \n                 optmFit.DF\n             })\n\n# Convert list of optimizations into data frame\nif(length(optmFit.DF)) {\n    optmFit.DF <- Reduce(function(x, y) merge(x, y, by=\"Param\", all=T), optmFit.DF)\n} else {\n    optmFit.DF <- optmFit.DF$fold1\n}\nnames(optmFit.DF) <- c(\"Param\", names(object))\n\n## Sort parameters data frame\n#coef.order <- c(\"Intercept\", \n#                paste0(c(fixed.vars, random.vars), \".coef\"), \n#                paste0(random.vars, \".adstock\"),\n#                c(\"rss.train\", \"rss.test\"))\n\n#optm.LM <- optm.LM[order(match(optm.LM$Param, coef.order)), ]\n\n# Return file optimized parameters data frame\noptmFit.DF",
    "created" : 1414264694624.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3934843893",
    "id" : "FE85D739",
    "lastKnownWriteTime" : 1414423143,
    "path" : "~/OneDrive/Work Files/R Libraries/MMR Testing/coefExtract.R",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled2"
    },
    "source_on_save" : false,
    "type" : "r_source"
}